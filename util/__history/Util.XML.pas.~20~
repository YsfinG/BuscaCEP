unit Util.XML;

interface

uses
   XMLDoc, XMLIntf, System.Rtti;

type
   TXMLUtil = class
   private
      class procedure ObjectToXML(pXMLNode: IXMLNode; const pObject: TObject;
         const pType: TRttiType); overload;
   public
      class function ObjectToXML(const pObject: TObject): TXMLDocument; overload;
   end;

implementation

uses
   System.TypInfo;

{ TXMLUtil }

class procedure TXMLUtil.ObjectToXML(pXMLNode: IXMLNode;
   const pObject: TObject; const pType: TRttiType);
var
   xContext: TRttiContext;
   xProperty: TRttiProperty;
   xObject: TObject;
begin
   if pObject = Nil then
      Exit;

   if pObject.ClassInfo = Nil then
      Exit;

   for xProperty in pType.GetDeclaredProperties do
   begin
      if xProperty.PropertyType.TypeKind = tkClass then
      begin
         try
            xObject := GetObjectProp(pObject, xProperty.Name);
         except
            Continue;
         end;

         ObjectToXML(pXMLNode.AddChild(xProperty.Name), xObject, xProperty.PropertyType);
      end
      else
      begin
         xTeste := GetPropValue(pObject, xProperty.Name, True);
         pXMLNode.ChildValues[xProperty.Name] := xTeste;
      end;
   end;
end;

class function TXMLUtil.ObjectToXML(const pObject: TObject): TXMLDocument;
var
   xContext: TRttiContext;
   xType   : TRttiType;
begin
   try
      xContext := TRttiContext.Create;
      xType    := xContext.GetType(pObject.ClassType);

      Result := TXMLDocument.Create(Nil);
      Result.Active := True;
      ObjectToXML(Result.AddChild(pObject.ClassName), pObject, xType);
   finally
      xContext.Free;
   end;
end;

end.
